package org.vaadin.activiti.simpletravel.config;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.jar.JarFile;
import java.util.stream.Collectors;
import javax.persistence.EntityManager;
import javax.sql.DataSource;
import javax.persistence.EntityManagerFactory;
import javax.persistence.spi.PersistenceUnitInfo;

import org.apache.commons.dbcp.BasicDataSource;
import org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl;
import org.hibernate.jpa.boot.internal.PersistenceUnitInfoDescriptor;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Component;
import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.net.URLClassLoader;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;

@Component
public class JpaEntityManagerFactory {
	
    private final Environment env;

    public JpaEntityManagerFactory(Environment env) {
        this.env = env;
    }
    
    private static final String PROPERTY_NAME_HIBERNATE_DIALECT = "hibernate.dialect";
    private static final String PROPERTY_NAME_HIBERNATE_MAX_FETCH_DEPTH = "hibernate.max_fetch_depth";
    private static final String PROPERTY_NAME_HIBERNATE_JDBC_FETCH_SIZE = "hibernate.jdbc.fetch_size";
    private static final String PROPERTY_NAME_HIBERNATE_JDBC_BATCH_SIZE = "hibernate.jdbc.batch_size";
    private static final String PROPERTY_NAME_HIBERNATE_SHOW_SQL = "hibernate.show_sql";
    
//    private final String DB_URL = "jdbc:mysql://databaseurl";
//    private final String DB_USER_NAME = "username";
//    private final String DB_PASSWORD = "password";
//    private final Class[] entityClasses;
       
    public EntityManager getEntityManager() {
        return getEntityManagerFactory().createEntityManager();
    }
    
    protected EntityManagerFactory getEntityManagerFactory() {
        PersistenceUnitInfo persistenceUnitInfo = getPersistenceUnitInfo(getClass().getSimpleName());
        Map<String, Object> configuration = new HashMap<>();
        return new EntityManagerFactoryBuilderImpl(
        		new PersistenceUnitInfoDescriptor(persistenceUnitInfo), configuration)
        		.withDataSource(getJapEntitydatasource())
          .build();
    }
    
    protected HibernatePersistenceUnitInfo getPersistenceUnitInfo(String name) {
        return new HibernatePersistenceUnitInfo(name, getEntityClassNames(), jpaHibernateProperties());
    }
    
    protected List<String> getEntityClassNames() {
        return Arrays.asList(getEntities())
          .stream()
          .map(Class::getName)
          .collect(Collectors.toList());
    }
    
    protected Properties jpaHibernateProperties() {
        Properties properties = new Properties();
        properties.put("hibernate.dialect", "org.hibernate.dialect.H2Dialect");
        properties.put("hibernate.id.new_generator_mappings", false);
        properties.put("hibernate.connection.datasource", getJapEntitydatasource());
        return properties;
    }
    
    protected Class[] getEntities() {
    	List<Class<?>> list = new ArrayList<Class<?>>();
    	list.add(org.vaadin.activiti.simpletravel.domain.AbstractEntity.class);
    	list.add(org.vaadin.activiti.simpletravel.domain.Expense.class);
    	list.add(org.vaadin.activiti.simpletravel.domain.TravelInvoice.class);
    	list.add(org.vaadin.activiti.simpletravel.domain.TravelInvoiceDecision.class);
    	list.add(org.vaadin.activiti.simpletravel.domain.TravelRequest.class);
    	list.add(org.vaadin.activiti.simpletravel.domain.TravelRequestDecision.class);
    	list.add(org.vaadin.activiti.simpletravel.alexdp.model.Address.class);
    	list.add(org.vaadin.activiti.simpletravel.alexdp.model.Applicant.class);
    	Class[] array = new Class[list.size()];
    	return list.toArray(array);
    }
    
    private DataSource getJapEntitydatasource() {
		org.apache.commons.dbcp.BasicDataSource basicDataSource = new BasicDataSource();
		basicDataSource.setDriverClassName(env.getProperty("spring.datasource.driverClassName"));
		basicDataSource.setUrl(env.getProperty("spring.datasource.url"));
		basicDataSource.setUsername(env.getProperty("spring.datasource.username"));
		basicDataSource.setPassword(env.getProperty("spring.datasource.password"));
		basicDataSource.setDefaultAutoCommit(false);
		return basicDataSource;
    }
    
//    public static class EntityManagerHolder {
//        private static final EntityManager ENTITY_MANAGER = new JpaEntityManagerFactory()
//          .getEntityManager();
//    }
// 
    
    private static Class[] getClasses(String packageName) throws ClassNotFoundException, IOException {
	    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
	    assert classLoader != null;
	    String path = packageName.replace('.', '/');
	    Enumeration<URL> resources = classLoader.getResources(path);
	    List<File> dirs = new ArrayList<File>();
	    while (resources.hasMoreElements()) {
	        URL resource = resources.nextElement();
	        dirs.add(new File(resource.getFile()));
	    }
	    ArrayList<Class> classes = new ArrayList<Class>();
	    for (File directory : dirs) {
	        classes.addAll(findClasses(directory, packageName));
	    }
	    return classes.toArray(new Class[classes.size()]);
	}
    
    /**
	 * Recursive method used to find all classes in a given directory and subdirs.
	 *
	 * @param directory   The base directory
	 * @param packageName The package name for classes found inside the base directory
	 * @return The classes
	 * @throws ClassNotFoundException
	 */
	private static List<Class> findClasses(File directory, String packageName) throws ClassNotFoundException {
	    List<Class> classes = new ArrayList<Class>();
	    if (!directory.exists()) {
	        return classes;
	    }
	    File[] files = directory.listFiles();
	    for (File file : files) {
	        if (file.isDirectory()) {
	            assert !file.getName().contains(".");
	            classes.addAll(findClasses(file, packageName + "." + file.getName()));
	        } else if (file.getName().endsWith(".class")) {
	            classes.add(Class.forName(packageName + '.' + file.getName().substring(0, file.getName().length() - 6)));
	        }
	    }
	    return classes;
	}
    
//	/**
//
//     *
//
//     * Attempts to list all the classes in the specified package as determined     *
//
//     * by the context class loader…
//
//     *
//
//     * @param pckgname the package name to search
//
//     * @return a list of classes that exist within that package
//
//     * @throws ClassNotFoundException if something went wrong
//
//     *
//
//     */
//
//    public static List getClassesFromPackage(String pckgname) throws ClassNotFoundException {
//
//    	ArrayList result = new ArrayList();
//
//    	ArrayList<File> directories = new ArrayList();
//
//    	HashMap packageNames = null;
//
//    	try {
//
//    		for (URL jarURL : ((URLClassLoader) Thread.currentThread().getContextClassLoader()).getURLs()) {
//
//    			System.out.println("JAR:" + jarURL.getPath());
//
//    			getClassesInSamePackageFromJar(result, pckgname, jarURL.getPath());
//
//    			String path = pckgname;
//
//    			Enumeration<URL> resources = cld.getResources(path);
//
//    			File directory = null;
//
//    			while (resources.hasMoreElements()) {
//
//    				String path2 = resources.nextElement().getPath();
//
//    				directory = new File(URLDecoder.decode(path2, "UTF-8"));
//
//    				directories.add(directory);
//
//    			}
//
//    			if (packageNames == null) {
//
//    				packageNames = new HashMap();
//
//    			}
//
//    			packageNames.put(directory, pckgname);
//
//    		}
//
//    	} catch (NullPointerException x) {
//
//    		throw new ClassNotFoundException(pckgname + " does not appear to be a valid package (Null pointer exception)");
//
//    	} catch (UnsupportedEncodingException encex) {
//
//    		throw new ClassNotFoundException(pckgname + " does not appear to be a valid package (Unsupported encoding)");
//
//    	} catch (IOException ioex) {
//
//    		throw new ClassNotFoundException("IOException was thrown when trying to get all resources for " + pckgname);
//
//    	}
//
//    	for (File directory : directories) {
//
//    		if (directory.exists()) {
//
//    			String[] files = directory.list();
//
//    			for (String file : files) {
//
//    				if (file.endsWith(".class")) {
//
//    					try {
//
//    						//      System.out.println(packageNames.get(directory).toString() + ‘.’ + file.substring(0, file.length() – 6));
//
//    						result.add(Class.forName(packageNames.get(directory).toString() + "." + file.substring(0, file.length() – 6)));
//
//    					} catch (Throwable e) {
//
//    					}
//
//    				}
//
//    			}
//
//    		} else {
//
//    			throw new ClassNotFoundException(pckgname + " (" + directory.getPath() + ") does not appear to be a valid package");
//
//    		}
//
//    	}
//
//    	return result;
//
//    }
//
//	/**
//
//     *
//
//     * Returns the list of classes in the same directories as Classes in
//
//     * classes.
//
//     *
//
//     * @param result
//
//     * @param classes
//
//     * @param jarPath
//
//     *
//
//     */
//
//    private static void getClassesInSamePackageFromJar(List result, String packageName, String jarPath) {
//
//    	JarFile jarFile = null;
//
//    	try {
//
//    		jarFile = new JarFile(jarPath);
//
//    		Enumeration<JarEntry> en = jarFile.entries();
//
//    		while (en.hasMoreElements()) {
//
//    			JarEntry entry = en.nextElement();
//
//    			String entryName = entry.getName();
//
//    			packageName = packageName.replace(".", "/");
//
//    			if (entryName != null && entryName.endsWith(".class") && entryName.startsWith(packageName)) {
//
//    				try {
//
//    					Class entryClass = Class.forName(entryName.substring(0, entryName.length() – 6).replace(‘/’, ‘.’));
//
//    					if (entryClass != null) {
//
//    						result.add(entryClass);
//
//    					}
//
//    				} catch (Throwable e) {
//
//    					//do nothing, just continue processing classes
//
//    				}
//
//    			}
//
//    		}
//
//    	} catch (Exception e) {
//
//    	} finally {
//
//    		try {
//
//    			if (jarFile != null) {
//
//    				jarFile.close();
//
//    			}
//
//    		} catch (Exception e) {
//
//    		}
//
//    	}
//
//    }
}
